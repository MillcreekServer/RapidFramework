buildscript {
    ext.kotlin_version = '1.3.21'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.yaml:snakeyaml:1.8'
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.0.0'
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'io.github.wysohn'
version = '2.22.4'

ext {
    bukkit_version = '1.15.2-R0.1-SNAPSHOT'
    spark_version = '2.9.2'

    plugin_version = version
    description = 'description'
    author = 'wysohn'
    authors = []
}


import org.yaml.snakeyaml.DumperOptions
import org.yaml.snakeyaml.Yaml

task writePluginYml {
    DumperOptions options = new DumperOptions()
    options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK)
    options.setPrettyFlow(true)

    File file = new File("$projectDir/src/main/resources/plugin.yml")
    if (!file.exists()){
        if(!file.parentFile.exists())
            file.parentFile.mkdirs()
        file.createNewFile()
    }

    InputStream input = new FileInputStream(file)
    Yaml yaml = new Yaml(options)
    Map<String, Object> map = yaml.load(input)
    input.close()

    if (map == null)
        map = new HashMap<>()

    String id = project.name
    String desc = project.ext.description

    map.put("name", id)
    map.put("main", "io.github.wysohn.rapidframework2.bukkit.plugin.FakePlugin")
    map.put("version", project.ext.plugin_version)
    map.put("author", project.ext.author)
    map.put("authors", project.ext.authors)
    map.put("softdepend", [
            "ProtocolLib",
            "Vault",
            "PlaceholderAPI",
            "ProtocolLib",
            "WorldGuard",
    ])
    map.put("depend", [])
    map.put("commands", new HashMap<String, Object>() {
        {
            put(id.toLowerCase(), new HashMap<String, Object>() {
                {
                    put("aliases", [id.toLowerCase().substring(0, 3)])
                    put("description", desc)
                }
            })
        }
    })
    map.put("permissions", new HashMap<String, Object>() {
        {
            put(id.toLowerCase(), new HashMap<String, Object>() {
                {
                    put("description", "Grant admin permission")
                }
            })
        }
    })
    map.put("api-version", '1.13')

    FileWriter writer = new FileWriter(file)
    yaml.dump(map, writer)
    writer.close()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'src/main/kotlin']
        }
        resources {
            srcDirs = ['src/main/resources']
            include '**/*.yml'
            include '**/*.mcmeta'
            include '**/*.json'
            include '**/*.png'
        }
    }

    test {
        java {
            srcDirs = ['src/test/java/']
        }
    }
}

test {
//    minHeapSize = "128m"
//    maxHeapSize = "512m"
//    forkEvery = 25
//    maxParallelForks = 2

    testLogging {
        exceptionFormat = 'full'
    }
}

sourceCompatibility = 1.8

task copyThirdPartyJar(type: Copy) {
    from file('libs')
    include '*.jar'
    exclude 'spigot*.jar'
    into file('build/libs')
}
jar.finalizedBy(copyThirdPartyJar)

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven{
        url "https://hub.spigotmc.org/nexus/content/repositories/public/"
    }
    maven {
        url "http://nexus.hc.to/content/repositories/pub_releases/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

configurations {
    all*.exclude group: 'com.google.gson'
}

dependencies {
    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    implementation group: 'mysql', name: 'mysql-connector-java', version: '5.1.6'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    implementation fileTree(dir: "libs", includes: ['*.jar'])
    implementation "org.spigotmc:spigot-api:${bukkit_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.mockito:mockito-core:1.9.5'
    implementation 'org.powermock:powermock:1.5.6'
    implementation 'org.powermock:powermock-module-junit4:1.5.6'
    implementation 'org.powermock:powermock-api-mockito:1.5.6'
    implementation 'org.javassist:javassist:3.20.0-GA'
    implementation group: 'org.slf4j', name:'slf4j-api', version: '1.7.2'
    implementation group: 'org.slf4j', name:'slf4j-simple', version: '1.7.2'
    implementation "com.sparkjava:spark-core:${spark_version}"
    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.7.2'

    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.powermock:powermock:1.5.6'
    testCompile 'org.powermock:powermock-module-junit4:1.5.6'
    testCompile 'org.powermock:powermock-api-mockito:1.5.6'
    testCompile 'org.javassist:javassist:3.20.0-GA'
    testCompile group: 'com.carrotsearch', name: 'junit-benchmarks', version: '0.7.0'
}

shadowJar {
    from sourceSets.main.allSource
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    include "*.jar"
    include "io/github/wysohn/**"
    include "copy/**"
    include "org/apache/commons/**"
    include "spark/**"
    include "**.txt"
    include "**.yml"
}

jar {
    dependsOn(shadowJar)

    from sourceSets.main.allSource
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

publishing {
    repositories {
        maven {
            name = "RapidFramework"
            url = uri("https://maven.pkg.github.com/wysohn/RapidFramework")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from components.java
        }
    }
}